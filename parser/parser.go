// Code generated by goyacc -o parser.go -v y.output parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import "fmt"

var _ = fmt.Println

const NUMBER = 57346
const STRING = 57347
const IDENT = 57348
const LPAREN = 57349
const RPAREN = 57350
const D = 57351
const H = 57352
const L = 57353
const F = 57354
const A = 57355
const C = 57356
const P = 57357
const B = 57358
const K = 57359
const Q = 57360
const M = 57361
const MAX = 57362
const MIN = 57363
const ADD = 57364
const SUB = 57365
const MUL = 57366
const DIV = 57367
const MOD = 57368
const LBRACKET = 57369
const RBRACKET = 57370
const BITAND = 57371
const BITOR = 57372
const COMMA = 57373
const GT = 57374
const LT = 57375
const GE = 57376
const LE = 57377
const EQ = 57378
const NEQ = 57379
const QUESTION = 57380
const COLON = 57381
const SEMICOLON = 57382
const HASH = 57383
const LBRACE = 57384
const RBRACE = 57385
const CIRCUMFLEX = 57386
const ASSIGN = 57387
const KL = 57388
const KH = 57389
const UMINUS = 57390

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NUMBER",
	"STRING",
	"IDENT",
	"LPAREN",
	"RPAREN",
	"D",
	"H",
	"L",
	"F",
	"A",
	"C",
	"P",
	"B",
	"K",
	"Q",
	"M",
	"MAX",
	"MIN",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"LBRACKET",
	"RBRACKET",
	"BITAND",
	"BITOR",
	"COMMA",
	"GT",
	"LT",
	"GE",
	"LE",
	"EQ",
	"NEQ",
	"QUESTION",
	"COLON",
	"SEMICOLON",
	"HASH",
	"LBRACE",
	"RBRACE",
	"CIRCUMFLEX",
	"ASSIGN",
	"KL",
	"KH",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:453

func init() {
	// 初始化解析器相关设置
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 114

var yyAct = [...]int8{
	20, 54, 41, 40, 37, 26, 12, 27, 83, 27,
	80, 4, 110, 45, 30, 31, 43, 11, 19, 44,
	48, 49, 46, 47, 10, 8, 42, 81, 106, 9,
	82, 3, 28, 29, 92, 52, 7, 55, 5, 57,
	27, 70, 71, 72, 73, 68, 69, 74, 75, 76,
	77, 78, 79, 51, 50, 67, 60, 61, 56, 64,
	65, 66, 62, 63, 6, 58, 59, 34, 35, 36,
	32, 33, 18, 21, 53, 22, 23, 84, 24, 87,
	88, 85, 86, 17, 93, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 55, 94, 25, 38, 39, 89,
	90, 91, 105, 104, 16, 107, 108, 109, 15, 14,
	13, 111, 2, 1,
}

var yyPact = [...]int16{
	69, -1000, -35, -1000, -29, -1000, 3, -18, 48, 43,
	-40, 77, -44, 17, -1000, -1000, -1000, -1000, -1000, -1000,
	7, -1000, -1000, 69, -1000, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, -1000, -1000, 69, 69, 69, 69,
	69, 69, 2, -1, -1000, -29, -1000, -31, -18, -18,
	48, 48, 43, 43, -40, -40, -40, 77, -44, -44,
	-1000, -1000, -1000, 64, -1000, -1000, 82, 15, -1000, -1000,
	-1000, -1000, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, -1000, -29, -1000, -1000, -1000, -1000, -1000,
	84, 9, -1000, -1000, 69, 69, 69, -1000, -7, -1000,
	69, -1000,
}

var yyPgo = [...]int8{
	0, 113, 112, 31, 11, 6, 0, 110, 109, 108,
	104, 83, 78, 1, 74, 72, 64, 36, 38, 25,
	29, 24, 17, 18,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 3, 4, 18, 18, 16, 16,
	16, 17, 17, 17, 19, 19, 19, 20, 20, 20,
	20, 21, 21, 22, 22, 22, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 7, 7, 7, 7, 7,
	7, 7, 8, 8, 9, 9, 10, 10, 10, 10,
	10, 10, 10, 10, 11, 11, 15, 15, 23, 6,
	6, 6, 6, 12, 14, 14, 13,
}

var yyR2 = [...]int8{
	0, 1, 1, 3, 1, 1, 1, 5, 1, 3,
	3, 1, 3, 3, 1, 3, 3, 1, 3, 3,
	3, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 5, 5, 5,
	5, 5, 2, 2, 3, 3, 3, 5, 7, 5,
	7, 7, 9, 5, 3, 5, 3, 3, 1, 1,
	1, 3, 1, 3, 1, 3, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -18, -16, -17, -19, -20,
	-21, -22, -5, -7, -8, -9, -10, -11, -15, -23,
	-6, 4, 6, 7, -12, 27, 40, 38, 29, 30,
	32, 33, 22, 23, 24, 25, 26, 44, 20, 21,
	47, 46, 9, 9, 12, 6, 15, 16, 13, 14,
	47, 46, -4, -14, -13, -4, -3, -4, -17, -17,
	-19, -19, -20, -20, -21, -21, -21, -22, -5, -5,
	-6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
	8, 28, 31, 39, 13, 17, 18, 15, 16, 17,
	18, 19, 19, -13, -4, -6, -6, -6, -6, -6,
	-6, -6, -6, -6, 19, 18, 19, -6, -6, -6,
	19, -6,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 4, 5, 6, 8, 11, 14,
	17, 21, 23, 26, 27, 28, 29, 30, 31, 32,
	58, 59, 60, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 42, 43, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 66, 3, 0, 9, 10,
	12, 13, 15, 16, 18, 19, 20, 22, 24, 25,
	33, 34, 36, 35, 44, 45, 46, 54, 56, 57,
	61, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 7, 37, 38, 39, 40, 41,
	47, 49, 53, 55, 0, 0, 0, 48, 51, 50,
	0, 52,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:48
		{
			var result interface{}
			var process string = ""
			for _, stmt := range yyDollar[1].StmtList {
				if stmt != nil {
					// 获取表达式结果
					result = stmt.Evaluate()

					// 获取投掷过程
					if exprStmt, ok := stmt.(*ExprStmt); ok {
						process = exprStmt.GetProcess()
					}
				}
			}
			SetResult(result, process) // 保存计算结果和过程
			yyVAL.StmtList = yyDollar[1].StmtList
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:68
		{
			yyVAL.StmtList = []Stmt{yyDollar[1].Stmt}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:72
		{
			yyVAL.StmtList = append(yyDollar[1].StmtList, yyDollar[3].Stmt)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:78
		{
			yyVAL.Stmt = &ExprStmt{yyDollar[1].Expr}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:84
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:90
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 7:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:94
		{
			yyVAL.Expr = &TernaryExpr{yyDollar[1].Expr, yyDollar[3].Expr, yyDollar[5].Expr}
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:100
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:104
		{
			yyVAL.Expr = &BitwiseExpr{yyDollar[1].Expr, yyDollar[3].Expr, true}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:108
		{
			yyVAL.Expr = &BitwiseExpr{yyDollar[1].Expr, yyDollar[3].Expr, false}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:114
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:118
		{
			yyVAL.Expr = &CompareExpr{yyDollar[1].Expr, yyDollar[3].Expr, true}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:122
		{
			yyVAL.Expr = &CompareExpr{yyDollar[1].Expr, yyDollar[3].Expr, false}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:128
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:132
		{
			yyVAL.Expr = &BinaryExpr{yyDollar[1].Expr, ADD, yyDollar[3].Expr}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:136
		{
			yyVAL.Expr = &BinaryExpr{yyDollar[1].Expr, SUB, yyDollar[3].Expr}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:142
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:146
		{
			yyVAL.Expr = &BinaryExpr{yyDollar[1].Expr, MUL, yyDollar[3].Expr}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:150
		{
			yyVAL.Expr = &BinaryExpr{yyDollar[1].Expr, DIV, yyDollar[3].Expr}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:154
		{
			yyVAL.Expr = &BinaryExpr{yyDollar[1].Expr, MOD, yyDollar[3].Expr}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:160
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:164
		{
			yyVAL.Expr = &BinaryExpr{yyDollar[1].Expr, CIRCUMFLEX, yyDollar[3].Expr}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:170
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:174
		{
			yyVAL.Expr = &MaxMinExpr{yyDollar[1].Expr, yyDollar[3].Expr, true}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:178
		{
			yyVAL.Expr = &MaxMinExpr{yyDollar[1].Expr, yyDollar[3].Expr, false}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:184
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:188
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:192
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:196
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:200
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:204
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:208
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:212
		{
			yyVAL.Expr = &HighLowSelectExpr{yyDollar[1].Expr, yyDollar[3].Expr, true, true}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:216
		{
			yyVAL.Expr = &HighLowSelectExpr{yyDollar[1].Expr, yyDollar[3].Expr, false, true}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:222
		{
			fmt.Printf("解析骰点表达式: %v d %v\n", yyDollar[1].Expr, yyDollar[3].Expr)
			yyVAL.Expr = &DiceExpr{Count: yyDollar[1].Expr, Sides: yyDollar[3].Expr, Drop: nil, Keep: nil, process: "", rolls: nil}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:227
		{
			fmt.Printf("解析连续骰点表达式: %v d %v\n", yyDollar[1].Expr, yyDollar[3].Expr)
			yyVAL.Expr = &DiceExpr{Count: yyDollar[1].Expr, Sides: yyDollar[3].Expr, Drop: nil, Keep: nil, process: "", rolls: nil}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:232
		{
			yyVAL.Expr = &DiceExpr{Count: yyDollar[1].Expr, Sides: yyDollar[3].Expr, Drop: yyDollar[5].Expr, Keep: nil, process: "", rolls: nil}
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:236
		{
			yyVAL.Expr = &DiceExpr{Count: yyDollar[1].Expr, Sides: yyDollar[3].Expr, Drop: nil, Keep: yyDollar[5].Expr, process: "", rolls: nil}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:240
		{
			yyVAL.Expr = &DiceExpr{Count: yyDollar[1].Expr, Sides: yyDollar[3].Expr, Drop: nil, Keep: nil, process: "", rolls: nil}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:244
		{
			yyVAL.Expr = &PenaltyBonusDiceExpr{IsBonus: false, Count: yyDollar[5].Expr}
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:248
		{
			yyVAL.Expr = &PenaltyBonusDiceExpr{IsBonus: true, Count: yyDollar[5].Expr}
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:254
		{
			yyVAL.Expr = &FateDiceExpr{Count: yyDollar[1].Expr, process: "", rolls: nil}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:258
		{
			// 处理 df 操作符
			if yyDollar[2].Str == "df" {
				yyVAL.Expr = &FateDiceExpr{Count: yyDollar[1].Expr, process: "", rolls: nil}
			} else {
				yylex.Error("非预期的标识符: " + yyDollar[2].Str)
			}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:269
		{
			yyVAL.Expr = &PenaltyBonusDiceExpr{IsBonus: false, Count: yyDollar[3].Expr}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:273
		{
			yyVAL.Expr = &PenaltyBonusDiceExpr{IsBonus: true, Count: yyDollar[3].Expr}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:279
		{
			yyVAL.Expr = &InfinitePoolDiceExpr{
				Initial:            yyDollar[1].Expr,
				AddLine:            yyDollar[3].Expr,
				SuccessLine:        &NumberExpr{Value: 8}, // 默认成功线为8
				ReverseSuccessLine: nil,
				Sides:              &NumberExpr{Value: 10}, // 默认面数为10
			}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:289
		{
			yyVAL.Expr = &InfinitePoolDiceExpr{
				Initial:            yyDollar[1].Expr,
				AddLine:            yyDollar[3].Expr,
				SuccessLine:        yyDollar[5].Expr,
				ReverseSuccessLine: nil,
				Sides:              &NumberExpr{Value: 10},
			}
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:299
		{
			yyVAL.Expr = &InfinitePoolDiceExpr{
				Initial:            yyDollar[1].Expr,
				AddLine:            yyDollar[3].Expr,
				SuccessLine:        yyDollar[5].Expr,
				ReverseSuccessLine: nil,
				Sides:              yyDollar[7].Expr,
			}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:309
		{
			yyVAL.Expr = &InfinitePoolDiceExpr{
				Initial:            yyDollar[1].Expr,
				AddLine:            yyDollar[3].Expr,
				SuccessLine:        &NumberExpr{Value: 8},
				ReverseSuccessLine: yyDollar[5].Expr,
				Sides:              &NumberExpr{Value: 10},
			}
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:319
		{
			yyVAL.Expr = &InfinitePoolDiceExpr{
				Initial:            yyDollar[1].Expr,
				AddLine:            yyDollar[3].Expr,
				SuccessLine:        &NumberExpr{Value: 8},
				ReverseSuccessLine: yyDollar[5].Expr,
				Sides:              yyDollar[7].Expr,
			}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:329
		{
			yyVAL.Expr = &InfinitePoolDiceExpr{
				Initial:            yyDollar[1].Expr,
				AddLine:            yyDollar[3].Expr,
				SuccessLine:        yyDollar[5].Expr,
				ReverseSuccessLine: yyDollar[7].Expr,
				Sides:              &NumberExpr{Value: 10},
			}
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:339
		{
			yyVAL.Expr = &InfinitePoolDiceExpr{
				Initial:            yyDollar[1].Expr,
				AddLine:            yyDollar[3].Expr,
				SuccessLine:        yyDollar[5].Expr,
				ReverseSuccessLine: yyDollar[7].Expr,
				Sides:              yyDollar[9].Expr,
			}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:349
		{
			yyVAL.Expr = &InfinitePoolDiceExpr{
				Initial:            yyDollar[1].Expr,
				AddLine:            yyDollar[3].Expr,
				SuccessLine:        &NumberExpr{Value: 8},
				ReverseSuccessLine: nil,
				Sides:              yyDollar[5].Expr,
			}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:361
		{
			yyVAL.Expr = &DoubleCrossDiceExpr{
				Initial: yyDollar[1].Expr,
				AddLine: yyDollar[3].Expr,
				Sides:   &NumberExpr{Value: 10}, // 默认面数为10
			}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:369
		{
			yyVAL.Expr = &DoubleCrossDiceExpr{
				Initial: yyDollar[1].Expr,
				AddLine: yyDollar[3].Expr,
				Sides:   yyDollar[5].Expr,
			}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:379
		{
			yyVAL.Expr = &HighLowSelectExpr{
				Expr:     yyDollar[1].Expr,
				Count:    yyDollar[3].Expr,
				KeepHigh: true,
				KeepLeft: true,
			}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:388
		{
			yyVAL.Expr = &HighLowSelectExpr{
				Expr:     yyDollar[1].Expr,
				Count:    yyDollar[3].Expr,
				KeepHigh: false,
				KeepLeft: true,
			}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:399
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:405
		{
			yyVAL.Expr = &NumberExpr{yyDollar[1].Num}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:409
		{
			yyVAL.Expr = &IdentExpr{yyDollar[1].Str}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:413
		{
			yyVAL.Expr = yyDollar[2].Expr
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:417
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:423
		{
			if arr, ok := yyDollar[2].Expr.(*ArrayExpr); ok {
				yyVAL.Expr = arr
			} else {
				yyVAL.Expr = &ArrayExpr{[]Expr{yyDollar[2].Expr}}
			}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:433
		{
			yyVAL.Expr = &ArrayExpr{[]Expr{yyDollar[1].Expr}}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:437
		{
			if arr, ok := yyDollar[1].Expr.(*ArrayExpr); ok {
				arr.Elements = append(arr.Elements, yyDollar[3].Expr)
				yyVAL.Expr = arr
			} else {
				yyVAL.Expr = &ArrayExpr{[]Expr{yyDollar[1].Expr, yyDollar[3].Expr}}
			}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:448
		{
			yyVAL.Expr = yyDollar[1].Expr
		}
	}
	goto yystack /* stack new state and value */
}
